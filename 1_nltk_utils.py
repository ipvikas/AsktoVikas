# -*- coding: utf-8 -*-
"""nltk_utils.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1K1SRvKSKdB5KjTXaQs1ZE7eu26UIgrWn
"""

###########  1  ###########

#https://www.youtube.com/watch?v=RpWeNzfSUHw&list=PLqnslRFeH2UrFW4AUgn-eY37qOAWQpJyg
#intents.json --> nltk_utils.py -->  model.py --> train.ipynb --> chat.ipynb 
import numpy as np
import nltk
nltk.download('punkt')
from nltk.stem.porter import PorterStemmer
stemmer = PorterStemmer()

"""1. Bag of Words
2.  Tokenization, Stemming, 
3. NLTK

"""

def tokenize(sentence):
    """
    split sentence into array of words/tokens
    a token can be a word or punctuation character, or number
    """
    return nltk.word_tokenize(sentence)

# print(tokenize('Hello how are you'))

def stem(word):
    """
    stemming = find the root form of the word
    examples:
    words = ["organize", "organizes", "organizing"]
    words = [stem(w) for w in words]
    -> ["organ", "organ", "organ"]
    """
    return stemmer.stem(word.lower())

# print(stem('organize'))

def bag_of_words(tokenized_sentence, words):
    """
    return bag of words array:
    1 for each known word that exists in the sentence, 0 otherwise
    example:
    sentence = ["hello", "how", "are", "you"]
    words = ["hi", "hello", "I", "you", "bye", "thank", "cool"]
    bog   = [  0 ,    1 ,    0 ,   1 ,    0 ,    0 ,      0]
    """
    # stem each word
    sentence_words = [stem(word) for word in tokenized_sentence]
    # initialize bag with 0 for each word
    bag = np.zeros(len(words), dtype=np.float32)
    for idx, w in enumerate(words):
        if w in sentence_words: 
            bag[idx] = 1

    return bag

# print(bag_of_words('Hello how are you', 'hi'))









# pip install wikipedia

# import wikipedia as wk #pip install wikipedia
# from collections import defaultdict



# #step9: Cosine Similarity
# # Generating response
# def response(sentence):
#     robo_response=''
#     TfidfVec = TfidfVectorizer(tokenizer=LemNormalize, stop_words='english')
#     tfidf = TfidfVec.fit_transform(sent_tokens)
#     vals = cosine_similarity(tfidf[-1], tfidf)
#     idx=vals.argsort()[0][-2]
#     flat = vals.flatten()
#     flat.sort()
#     req_tfidf = flat[-2]

#     if(req_tfidf==0) or "From Wikipedia" in sentence:#tell me about
#         print("Checking Wikipedia")
#         if sentence:
#             robo_response = wikipedia_data(sentence)
#             return robo_response
        
        
        
#     else:
#         robo_response = robo_response+sent_tokens[idx]
#         return robo_response



# import re, string, unicodedata
# def wikipedia_data(sentence):
#     reg_ex = re.search('from wikipedia (.*)', sentence)#tell me about 
#     try:
#         if reg_ex:
#             topic = reg_ex.group(1)
#             wiki = wk.summary(topic, sentences = 3)
#             return wiki
#     except Exception as e:
#             print("No content has been found")

